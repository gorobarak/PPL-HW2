#lang racket
(define lst1 (list 1 2 3))

(define lst2 (list 4 5 6))




(define append_single
  (lambda (lst elem)
    (if (empty? lst)
        '(elem)
        (cons (car lst) (append (cdr lst) elem))
        )
    )
)


; Signature: append(lst1 lst2)
; Type: [ List(T1) * List(T2) -> list(T1|T2) ]
; Purpose: concat lst2 to the end of lst1
; Pre-conditions: no pre-conditions
; Tests: 
(define append 
  (lambda(lst1 lst2)
      (if (empty? lst2)
          lst1
          (append (append_single lst1 (car lst2)) (cdr lst2))
          )
  )
)
(append_single lst1 4)
